package reldb.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import reldb.ResourceNotFoundException;
import reldb.models.Teacher;
import reldb.models.User;
import reldb.models.UserTeacher;
import reldb.repositories.TeacherRepository;
import reldb.repositories.UserRepository;
import reldb.repositories.UserTeacherRepository;

import javax.validation.Valid;

import java.util.Optional;

import static org.springframework.http.HttpStatus.OK;

@Controller    // This means that this class is a Controller
// in this case the root path will show all users
@RequestMapping("/users") // This means URL's start with /user (after Application path)
public class UsersController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired
	private UserTeacherRepository userTeacherRepository;

	@Autowired
	private TeacherRepository teacherRepository;

	// The root path will show all users
	@GetMapping("")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@PostMapping("/add")
	public @ResponseBody String addNewUser (@Valid @RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		User n = new User();
		n.setName(name);
		userRepository.save(n);
		return "User Saved";
	}

	@PutMapping("/{user_id}")
	public @ResponseBody String editUser(@Valid @PathVariable (value = "user_id") Integer userId, String name) {
		userRepository.findById(userId).map(user -> {
			user.setName(name);
			return userRepository.save(user);
		});
		return "Edit successful";
	}

	@PostMapping("/{user_id}")
	public @ResponseBody String bookTeacher(@PathVariable (value = "user_id") Integer userId, @RequestParam Integer teacherId) {
		Optional<User> oU = userRepository.findById(userId);
		User u = oU.get();
		Optional<Teacher> oT = teacherRepository.findById(teacherId);
		Teacher t = oT.get();
		UserTeacher ut = new UserTeacher(u, t);
		userTeacherRepository.save(ut);
		return "Booking created";
	}

	@GetMapping("/{user_id}/bookings")
	public @ResponseBody Iterable<UserTeacher> getAllBookingsByUserId(@PathVariable (value = "user_id")Integer userId ) {
		return userTeacherRepository.findAllByUser_Id(userId);
	}

	@DeleteMapping("/{user_id}")
	public ResponseEntity<?> deleteUserbyId(@Valid @PathVariable (value = "user_id") Integer userId) {
		return userRepository.findById(userId).map(user -> {
			userRepository.delete(user);
			return new ResponseEntity<>("User with id " + userId + " deleted", OK );
		}).orElseThrow(() -> new ResourceNotFoundException("User with id " + userId + " not found"));
	}
}
